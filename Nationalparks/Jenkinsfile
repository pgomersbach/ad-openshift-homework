// Jenkinsfile for NationalParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    
    stage('Checkout Source') {
   // git credentialsId: 'f5706e9b-6da8-40e6-9836-6bd582aece52', 
    //url: 'http://gogs-xy-gogs.apps.0845.openshift.opentlc.com/CICDLabs/openshift-tasks-private.git'
     checkout scm
    
    }

    sh "pwd"

    sh "ls"

    sh "cp ./nexus_settings.xml ./Nationalparks/"

    sh "sed -i 's/GUID/${GUID}/' ./Nationalparks/nexus_settings.xml"

    sh "sed -i 's/CLUSTER/${CLUSTER}/' ./Nationalparks/nexus_settings.xml"
    
    def mvnCmd = "mvn -s ./Nationalparks/nexus_settings.xml"

    def groupId    = getGroupIdFromPom("./Nationalparks/pom.xml")
    def artifactId = getArtifactIdFromPom("./Nationalparks/pom.xml")
    def version    = getVersionFromPom("./Nationalparks/pom.xml")

    // Set the tag for the development image: version + build number
    def devTag  = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image: version
    def prodTag = "${version}"

    stage('Build war') {
      echo "Building version ${version}"
    
      sh "${mvnCmd} -f ./Nationalparks/pom.xml clean package -DskipTests"
    }

    // Using Maven run the unit tests
    stage('Unit Tests') {
      echo "Running Unit Tests"
    
      sh "${mvnCmd} -f ./Nationalparks/pom.xml test"
    }
    
    // Using Maven call SonarQube for Code Analysis
    stage('Code Analysis') {
      echo "Running Code Analysis"
    
      sh "${mvnCmd} -f ./Nationalparks/pom.xml sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER}/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
    }

    // Publish the built war file to Nexus
    stage('Publish to Nexus') {
      echo "Publish to Nexus"
    
      sh "${mvnCmd} -f ./Nationalparks/pom.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases/"
    }

      // Build the OpenShift Image in OpenShift and tag it.
    stage('Build and Tag OpenShift Image') {
      echo "Building OpenShift container image tasks:${devTag}"
    
      sh "oc start-build nationalparks --follow --from-file=./Nationalparks/target/nationalparks.war -n ${GUID}-parks-dev"
    
      openshiftTag alias: 'false', destStream: 'nationalparks', destTag: devTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: 'nationalparks', srcTag: 'latest', verbose: 'false'
    }
    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `Nationalparks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
